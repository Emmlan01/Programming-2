defmodule Cmplx do

  def new(r, i) do
    {r, i}
  end

  #adderar två komplexa tal (a+bi)+(c+di) = (a+c)+(bi+di)
  def add({a,b},{c,d}) do
    {a + c, b + d}
  end

 # def sqr({a, 0}) do
  #  {a * a, 0}
 # end

  #def sqr({0, b}) do
  #  {0, -1 * b * b}
  #end

  #roten ur två komplexa tal (a + bi)^2 = (a^2 - (b)^2) + 2a(bi)
  def sqr({a, b}) do
    {a * a - b * b, 2 * a * b}
  end
  #absolutvärde av två komplexa tal |a + bi| = √(a^2 + b^2)
  def abs({a, b}) do
    :math.sqrt(a * a + b * b)
  end

end

defmodule Brot do

  def mandelbrot(c, m) do
    z0 = Cmplx.new(0, 0)
    i = 0
    test(i, z0, c, m)
  end

  def test(max, _, _, max) do
    0
  end

  #def test(i, z0, c, m) do
  #  cond do
  #    Cmplx.abs(z0) <= 2 ->
   #     z1 = Cmplx.add(Cmplx.sqr(z0), c)
   #     test(i + 1, z1, c, m)
    #    true -> i
   # end
  #end

  def test(i, z0, c, m) do
      zn = Cmplx.add(Cmplx.sqr(z0), c)
    cond do
    Cmplx.abs(zn) > 2 -> i
       #  i == m ->
        #  0
      true ->
        test(i + 1, zn, c, m)
      end
    end
end

#----------File writer-------------
defmodule PPM do
  # write(name, image) The image is a list of rows, each row a list of
  # tuples {R,G,B}. The RGB values are 0-255.

  def write(name, image) do
    height = length(image)
    width = length(List.first(image))
    {:ok, fd} = File.open(name, [:write])
    IO.puts(fd, "P6")
    IO.puts(fd, "#generated by ppm.ex")
    IO.puts(fd, "#{width} #{height}")
    IO.puts(fd, "255")
    rows(image, fd)
    File.close(fd)
  end

  defp rows(rows, fd) do
    Enum.each(rows, fn(r) ->
      colors = row(r)
      IO.write(fd, colors)
    end)
  end

  defp row(row) do
    List.foldr(row, [], fn({:rgb, r, g, b}, a) ->
      [r, g, b | a]
    end)
  end
  end


defmodule Color do

  def convert(depth,max)do
    f = depth / max
    a = 4 * f
    x = trunc(a)
    y = trunc(255 * (a - x))
    case x do
      0 -> {:rgb, y, 0, 50}
      1 -> {:rgb, 255, y, 0}
      2 -> {:rgb, 255 - y, 255, 0}
      3 -> {:rgb, 0, 0, y}
      4 -> {:rgb, 0, 255 - y, 255}
    end
  end
end

defmodule Mandel do
  def mandelbrot(width, height, x, y, k, depth) do
    trans = fn(w, h) ->
      Cmplx.new(x + k * (w - 1), y - k * (h - 1))
    end
    rows(width, height, trans, depth, [])
  end


  def rows(_, 0, _, _, rows) do rows end
def rows(width, height, trans, depth, rows) do
row = row(width, height, trans, depth, [])
rows(width, height - 1, trans, depth, [row | rows])
end
def row(0, _, _, _, row) do row end
def row(width, height, trans, depth, row) do
  c = trans.(width, height)
result = Brot.mandelbrot(c, depth)
color = Color.convert(result, depth)
row(width - 1, height, trans, depth, [color | row])
end


  def demo() do
    small(-1.6, 1.4, 0.9)
  end

  def small(x0, y0, xn) do
    width = 960
    height = 540
    depth = 64
    k = (xn - x0) / width
    image = Mandel.mandelbrot(width, height, x0, y0, k, depth)
    PPM.write("small.ppm", image)
  end
end



#/Users/emeliegartmon/Desktop/test.ppm
